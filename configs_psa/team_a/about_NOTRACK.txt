Author: Cornelius Diekmann

Checking the iptables-save dump from 2016-03-02.

I guess, NOTRACK is still not working as desired for traffic to your local machine.

Example (on localhost): Port 1234 should not create any state.

Test 1: Only NOTRACKing destination port in PREROUTING.

# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*raw
:PREROUTING ACCEPT [36:6215]
:OUTPUT ACCEPT [40:10419]
-A PREROUTING -i lo -p tcp -m tcp --dport 1234 -j NOTRACK
COMMIT
# Completed on Fri Mar 11 15:11:22 2016
# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --sport 1234 -j ACCEPT
COMMIT
# Completed on Fri Mar 11 15:11:22 2016

Having netcat listen on 1234 and connectiong to it, using destination ip 127.8.8.8:

# iptables -t raw -L -n -v && iptables -L -n -v
Chain PREROUTING (policy ACCEPT 60 packets, 7621 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    4   232 CT         tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 NOTRACK

Chain OUTPUT (policy ACCEPT 62 packets, 11607 bytes)
 pkts bytes target     prot opt in     out     source               destination    
      
Chain INPUT (policy ACCEPT 17 packets, 1010 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    8   516 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    1    60 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234
    0     0 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp spt:1234

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 22 packets, 1188 bytes)
 pkts bytes target     prot opt in     out     source               destination

The rule for "tcp spt:1234" did not match any packets, something must be wrong.

# conntrack -L
tcp      6 431950 ESTABLISHED src=127.0.0.1 dst=127.8.8.8 sport=49792 dport=1234 src=127.8.8.8 dst=127.0.0.1 sport=1234 dport=49792 [ASSURED] mark=0 use=1

We can see that only one direction works. If the destination port is 1234, no state is established and in the INPUT chain, the tcp dpt:1234 rule matches (once). 
However, for answer packets, where the source port is 1234, state is established. We can see that the tcp spt:1234 has a packet counter of zero. 
Those packets have been handled by the ESTABLISHED rule above.



--- Next attempt
Test 2: 
 * NOTRACKing destination port in PREROUTING. (incoming packets)
 * NOTRACKing source port in OUTPUT. (outgoing packets)


# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*raw
:PREROUTING ACCEPT [36:6215]
:OUTPUT ACCEPT [40:10419]
-A PREROUTING -i lo -p tcp -m tcp --dport 1234 -j NOTRACK
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j NOTRACK
COMMIT
# Completed on Fri Mar 11 15:11:22 2016
# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --sport 1234 -j ACCEPT
-A OUTPUT -o lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j ACCEPT
COMMIT
# Completed on Fri Mar 11 15:11:22 2016


Having netcat listen on 1234 and connectiong to it, using destination ip 127.8.8.8:


# iptables -t raw -L -n -v && iptables -L -n -v
Chain PREROUTING (policy ACCEPT 34 packets, 1831 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    7   438 CT         tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 NOTRACK

Chain OUTPUT (policy ACCEPT 35 packets, 1830 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    6   320 CT         tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp spt:1234 NOTRACK
Chain INPUT (policy ACCEPT 21 packets, 1073 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    7   438 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234
    6   320 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp spt:1234

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 22 packets, 1072 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    7   438 ACCEPT     tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp dpt:1234
    6   320 ACCEPT     tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp spt:1234

Looks very good. The ESTABLISHED rules did not match on any packets.

# conntrack -L
tcp      6 116 SYN_SENT src=127.0.0.1 dst=127.8.8.8 sport=49838 dport=1234 [UNREPLIED] src=127.8.8.8 dst=127.0.0.1 sport=1234 dport=49838 mark=0 use=1

Conntrack is still trying to set up some state! Somthing is still not working.
This is because packets go into the lo interface and come out again (so we basically see them twice).


--- Next attempt
Test 3: 
 * NOTRACKing destination port in PREROUTING. (incoming packets)
 * NOTRACKing source port in OUTPUT. (outgoing packets)
 * NOTRACKing source port in PREROUTING. (basically outgoing packets from the server delivered via lo)
 * NOTRACKing destination port in OUTPUT. (basically incoming packets to the server delivered via lo)
 
 
# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*raw
:PREROUTING ACCEPT [36:6215]
:OUTPUT ACCEPT [40:10419]
-A PREROUTING -i lo -p tcp -m tcp --dport 1234 -j NOTRACK
-A PREROUTING -i lo -p tcp -m tcp --sport 1234 -j NOTRACK
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j NOTRACK
-A OUTPUT -o lo -p tcp -m tcp --dport 1234 -j NOTRACK
COMMIT
# Completed on Fri Mar 11 15:11:22 2016
# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --sport 1234 -j ACCEPT
-A OUTPUT -o lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j ACCEPT
COMMIT
# Completed on Fri Mar 11 15:11:22 2016

Having netcat listen on 1234 and connectiong to it, using destination ip 127.8.8.8:

# iptables -t raw -L -n -v && iptables -L -n -v
Chain PREROUTING (policy ACCEPT 25 packets, 1470 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    7   387 CT         tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 NOTRACK
    6   333 CT         tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp spt:1234 NOTRACK

Chain OUTPUT (policy ACCEPT 25 packets, 1368 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    6   333 CT         tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp spt:1234 NOTRACK
    7   387 CT         tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 NOTRACK
Chain INPUT (policy ACCEPT 12 packets, 750 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    7   387 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234
    6   333 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp spt:1234

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 12 packets, 648 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    7   387 ACCEPT     tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp dpt:1234
    6   333 ACCEPT     tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp spt:1234

Finally, conntrack -L does not have any state for tcp port 1234 on localhost!

YAY!


But is this really enough?
Let's lock down the machine so that it only accepts connections to 1234.
# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*raw
:PREROUTING ACCEPT [36:6215]
:OUTPUT ACCEPT [40:10419]
-A PREROUTING -i lo -p tcp -m tcp --dport 1234 -j NOTRACK
-A PREROUTING -i lo -p tcp -m tcp --sport 1234 -j NOTRACK
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j NOTRACK
-A OUTPUT -o lo -p tcp -m tcp --dport 1234 -j NOTRACK
COMMIT
# Completed on Fri Mar 11 15:11:22 2016
# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --sport 1234 -j ACCEPT
-A INPUT -i lo -j DROP
-A OUTPUT -o lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j ACCEPT
-A OUTPUT -o lo -j DROP
COMMIT
# Completed on Fri Mar 11 15:11:22 2016

Testing with netcat: we can still connect to 1234 but connections to port 80 are DROPed.

Really? What if we use the SOURCE port 1234 to connect to destination port 80?
# nc -p 1234 127.8.8.8 80
This works!
Our machine is effectively reachable on ANY port.


--- Next attempt
Test 4: As above
        AND: answer packets must have the ACK flag set

Requiring the ACK flag prevents that someone can connect to our machine on ANY port by just using source port 1234.

# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*raw
:PREROUTING ACCEPT [36:6215]
:OUTPUT ACCEPT [40:10419]
-A PREROUTING -i lo -p tcp -m tcp --dport 1234 -j NOTRACK
-A PREROUTING -i lo -p tcp -m tcp --sport 1234 -j NOTRACK
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j NOTRACK
-A OUTPUT -o lo -p tcp -m tcp --dport 1234 -j NOTRACK
COMMIT
# Completed on Fri Mar 11 15:11:22 2016
# Generated by iptables-save v1.4.21 on Fri Mar 11 15:11:22 2016
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --sport 1234 --tcp-flags ACK ACK -j ACCEPT
-A INPUT -i lo -p tcp -m tcp --sport 1234 -j DROP
-A INPUT -i lo -j DROP
-A OUTPUT -o lo -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --dport 1234 -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 --tcp-flags ACK ACK -j ACCEPT
-A OUTPUT -o lo -p tcp -m tcp --sport 1234 -j DROP
-A OUTPUT -o lo -j DROP
COMMIT
# Completed on Fri Mar 11 15:11:22 2016

We can connect to port 1234 normally.
As above, conntrack -L confirms that we don't set up any state.
When we try to connect to port destination 80 using soure port 1234, we get DROPed.

# iptables -t raw -L -n -v && iptables -L -n -v
Chain PREROUTING (policy ACCEPT 12 packets, 654 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    6   331 CT         tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 NOTRACK
    4   219 CT         tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp spt:1234 NOTRACK

Chain OUTPUT (policy ACCEPT 16 packets, 894 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    8   459 CT         tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp spt:1234 NOTRACK
    6   331 CT         tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 NOTRACK
Chain INPUT (policy ACCEPT 2 packets, 104 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    6   331 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234
    4   219 ACCEPT     tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp spt:1234 flags:0x10/0x10
    0     0 DROP       tcp  --  lo     *       0.0.0.0/0            0.0.0.0/0            tcp spt:1234
    0     0 DROP       all  --  lo     *       0.0.0.0/0            0.0.0.0/0           

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 2 packets, 104 bytes)
 pkts bytes target     prot opt in     out     source               destination         
    0     0 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    6   331 ACCEPT     tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp dpt:1234
    4   219 ACCEPT     tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp spt:1234 flags:0x10/0x10
    4   240 DROP       tcp  --  *      lo      0.0.0.0/0            0.0.0.0/0            tcp spt:1234
    0     0 DROP       all  --  *      lo      0.0.0.0/0            0.0.0.0/0  

The DROP rules do not match for valid traffic, all is fine :)
The DROP rule for source port 1234 (if ACK flag not set) matches. 

YAY!


